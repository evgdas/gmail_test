plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}
allure {
    autoconfigure = true
    version = '2.13.5'

    useJUnit5() {
        version = '2.13.5'
    }
}

dependencies {
    compile("com.codeborne:selenide:5.14.2")
    compile("io.qameta.allure:allure-selenide:2.13.5")

    compile("org.junit.jupiter:junit-jupiter-api:5.6.2")
    compile("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    compile("org.junit.jupiter:junit-jupiter-params:5.6.2")
    compile ("ch.qos.logback:logback-classic:1.2.3")

    compile("org.aeonbits.owner:owner:1.0.12")
    compile("io.qameta.allure:allure-java-commons:2.13.5")
    compile ("org.hamcrest:hamcrest:2.2")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
tasks.withType(Test) {
    systemProperties = System.properties
    if (project.hasProperty("threads")) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': project.getProperty("threads").toInteger()
        ]
    }
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

task gmail(type: Test) {
    useJUnitPlatform {
        includeTags 'gmail'
    }
}

test {
    useJUnitPlatform()

}